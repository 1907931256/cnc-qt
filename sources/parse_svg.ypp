/* -*-c++-*- */

%{
/****************************************************************************
 * C# to Qt portation, Linux developing                                     *
 * flex/bison SVG parser                                                    *
 * Copyright (C) 2015-2018 by Eduard Kalinowski                             *
 * Germany, Lower Saxony, Hanover                                           *
 * eduard_kalinowski@yahoo.de                                               *
 *                                                                          *
 * C# project CNC-controller-for-mk1                                        *
 * https://github.com/selenur/CNC-controller-for-mk1                        *
 *                                                                          *
 * The Qt project                                                           *
 * https://github.com/eduard-x/cnc-qt                                       *
 *                                                                          *
 * CNC-Qt is free software; may be distributed and/or modified under the    *
 * terms of the GNU General Public License version 3 as published by the    *
 * Free Software Foundation and appearing in the file LICENSE_GPLv3         *
 * included in the packaging of this file.                                  *
 *                                                                          *
 * This program is distributed in the hope that it will be useful,          *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of           *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            *
 * GNU General Public License for more details.                             *
 *                                                                          *
 * You should have received a copy of the GNU Lesser General Public         *
 * License along with CNC-Qt. If not, see  http://www.gnu.org/licenses      *
 ****************************************************************************/
 

#if HAVE_CONFIG_H
# include <config.h>
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define YYERROR_VERBOSE 42
#define YYDEBUG 1
#define YYMAXDEPTH 1000000

#define __NOEXTENSIONS__ 1


#include <QString>
#include <QChar>
#include <QDebug>


#include "Settings.h"

#include "GData.h"

/*


// static int svglineno = 0;*/
extern int svg_parse (void);
extern void svg_error (const char *c);
extern int svg_lex (void);
extern int svg_lex_destroy (void);

extern int svg_lineno;
extern int svg_charno;
//


// bool set_data_float(char c, float f);

// svg_lineno = 0;


// initializing for vector
ParserData *svg_data = new ParserData();


%}

%name-prefix "svg_"
%locations

%token INT
%token HEXVAL
%token FLOAT
%token NEW_LINE

%token InvalidCharacter


%union {
    int       i_val;
    float     f_val;
    char      c_val;
    char*     s_val;
    class ParserData* g;
}

%token ' ' ','

%token <s_val> NAME
%token <s_val> STRING
%token <c_val> PARAM OPER

%type <i_val> INT HEXVAL
%type <f_val> FLOAT

%start parse_svg

%%

parse_svg: 
        | tags
        ;

tags:   tag 
        | tag tags
        ;
        
tag:    NAME attribs
        | attribs
        ;


attribs: attrib 
        | attrib attribs
        ;


attrib: NAME EXPRS
        {
            qInfo() << "attr name" << $1;
        }
        | NAME 
        {
            /* ignore if only NAME of attribute, URL was removed for example */
        }
        | NEW_LINE
        ;


EXPRS:  EXPR 
        | EXPR EXPRS
        ;


EXPR:   STRING
        {
            qInfo() << "str" << $1;
        }
        | HEXVAL 
        {
            qInfo() << "hex " << $1;
        }
        | INT 
        {
            qInfo() << "int " << $1;
        }
        | FLOAT
        {
            qInfo() << "float " << $1;
        }
        | FLOAT ',' FLOAT
        {
            qInfo() << "floats " << $1 << $3;
        }
        | PARAM 
        {
            qInfo() << $1;
            
            switch ($1) {
                case 'M': // moveto x y
                    break;
                case 'm': // moveto dx dy
                    break;
                case 'L': // lineto 
                    break;
                case 'l': // lineto dx dy 
                    break;
                case 'H': // horizontal lineto
                    break;
                case 'h': // horizontal lineto dx
                    break;
                case 'V': // vertical lineto
                    break;
                case 'v': // vertical lineto dy
                    break;
                case 'C': // curveto
                    break;
                case 'c': // curveto dx dy 
                    break;
                case 'S': // smooth curveto // TODO s?
                    break;
                case 'Q': // quadratic Bézier curve // TODO q?
                    break;
                case 'T': // smooth quadratic Bézier curveto // TODO t?
                    break;
                case 'A': // elliptical Arc // TODO a?
                    break;
                case 'Z': // closepath
                case 'z': // closepath
                    break;
                default:
                    break;
            }
        }
        | ' '
        {
            qInfo() << "separator";
            Parser::dataVector << *svg_data;
        }
        ;

%%

extern YYLTYPE svg_lloc;

#define YY_USER_ACTION             \
  offset += svg_leng;              \
  svg_lloc.last_line = svg_lineno; \
  svg_lloc.last_column = offset;
  
void svg_error (const char * error) {
  fprintf (stderr, "line %d pos %d: %s\n", svg_lineno, svg_charno, error);
//   return 0;
}
