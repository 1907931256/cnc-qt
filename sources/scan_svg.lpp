/* -*-c-*- */

%{
/****************************************************************************
 * C# to Qt portation, Linux developing                                     *
 * flex/bison SVG parser                                                    *
 * Copyright (C) 2015-2018 by Eduard Kalinowski                             *
 * Germany, Lower Saxony, Hanover                                           *
 * eduard_kalinowski@yahoo.de                                               *
 *                                                                          *
 * C# project CNC-controller-for-mk1                                        *
 * https://github.com/selenur/CNC-controller-for-mk1                        *
 *                                                                          *
 * The Qt project                                                           *
 * https://github.com/eduard-x/cnc-qt                                       *
 *                                                                          *
 * CNC-Qt is free software; may be distributed and/or modified under the    *
 * terms of the GNU General Public License version 3 as published by the    *
 * Free Software Foundation and appearing in the file LICENSE_GPLv3         *
 * included in the packaging of this file.                                  *
 *                                                                          *
 * This program is distributed in the hope that it will be useful,          *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of           *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            *
 * GNU General Public License for more details.                             *
 *                                                                          *
 * You should have received a copy of the GNU Lesser General Public         *
 * License along with CNC-Qt. If not, see  http://www.gnu.org/licenses      *
 ****************************************************************************/

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-register"
#endif

#if HAVE_CONFIG_H
# include <config.h>
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#ifdef __MINGW32__
#include <io.h>
#endif

#ifdef HAVE_UNISTD_H
#include <unistd.h>
#endif



#if !HAVE_STRCHR
# define strchr  index
# define strrchr rindex
#endif



// this generated header file from parse_svg.ypp
#include "parse_svg.h"


#include "Settings.h"
#include "GCode.h"

extern int svg_lineno;
extern YYLTYPE svg_lloc; // TODO 
extern int svg_charno = 1;

%}


WSPACE   [ \t\r\f]+
DIGITS   [0-9]+
INTEGER  [+-]?{DIGITS}
REAL1    [+-]?{DIGITS}?[.]{DIGITS}
REAL2    [+-]?{DIGITS}[.]{DIGITS}?
REAL3    {REAL2}[eE][+-]?{DIGITS}
HEXNUM   #[0-9A-F]+
IDNAME   [A-Z\-]+{DIGITS}?
ID       {IDNAME}(":"{IDNAME})?
URL      "\""["HTTP:\/"|"HTTPS:\/"].*[^\"]
PARAM    {WSPACE}?[A-Z]{WSPACE}
EOL      [\n]+
VERS     [0-9]+\.[0-9]+\.[0-9]+
REL      {WSPACE}?"r"[0-9]*
BEG      {WSPACE}?"<"
END      ">"{WSPACE}?
ANY_TEXT [0-9A-Z\s\;_\:]+
OPER     [\(\)]


%x TAG ATTRIB DATAFIELD

%option stack caseless yylineno noyywrap nounput noinput prefix="svg_"


%%

<INITIAL,TAG,ATTRIB>{EOL} {
    svg_charno = 1;
    return NEW_LINE;
}

<INITIAL,TAG,ATTRIB>{WSPACE} {
    svg_charno += yyleng;
    /* skip */
}

<INITIAL>{BEG}\?.*\?{END} { 
    /* fisrt xml line */
} 

<INITIAL>{BEG}"!--".*"--"{END} {
    /* ignore comments */
} 

<INITIAL>{BEG} {
    svg_charno += yyleng;
    yy_push_state(TAG);
}

<TAG>\/{ID}{END} {  /* end of tag */
    svg_charno += yyleng;
    yy_pop_state();
}

<TAG>"/"{END} { /* end of tag */
    svg_charno += yyleng;
    yy_pop_state();
}

<TAG>{ID} {
    svg_charno += yyleng;
    svg_lval.s_val = strdup(svg_text);
    yy_push_state(ATTRIB);
    return NAME;
}

<ATTRIB>{END} {
    svg_charno += yyleng;
    yy_pop_state();
}


<ATTRIB>{ID} {
    svg_charno += yyleng;
     svg_lval.s_val = strdup(svg_text);
     return NAME;
}

<ATTRIB>"=" {
    svg_charno += yyleng;
    /* ignore this part */
}

<ATTRIB>"\"" {
    svg_charno += yyleng;
    yy_push_state(DATAFIELD);
}

<DATAFIELD>"\"" {
    svg_charno += yyleng;
    yy_pop_state();
}

<DATAFIELD>{WSPACE} {
    svg_charno += yyleng;
    return ' ';
}

<DATAFIELD>{EOL} {
    svg_charno = 1;
    /* ignore */
}

<DATAFIELD,ATTRIB>{URL} { 
    svg_charno += yyleng;
    /* ignore this part */
    /*return NEW_LINE;*/
}

<DATAFIELD>{HEXNUM} {
    svg_charno += yyleng;
    svg_lval.i_val = strtol(&svg_text[1], NULL, 16);
    return HEXVAL;
}

<DATAFIELD>{IDNAME}":" {
    svg_charno += yyleng;
    svg_lval.s_val = strndup(svg_text, strlen(svg_text)-1);
    return STRING;
}

<DATAFIELD>{OPER} {
    svg_charno += yyleng;
    /* svg_lval.c_val = svg_text[0]; 
    return OPER; */
}

<DATAFIELD>{INTEGER} { 
    svg_charno += yyleng;
    svg_lval.f_val = (float)strtol(svg_text, NULL, 10); 
    return FLOAT; 
}

<DATAFIELD>{PARAM} { 
    svg_charno += yyleng;
    svg_lval.c_val = svg_text[0]; 
    return PARAM; 
}

<DATAFIELD>{VERS}{WSPACE}{REL} {
    svg_charno += yyleng;
    svg_lval.s_val = strdup(svg_text);
    return STRING;
}

<DATAFIELD>',' { 
    svg_charno += yyleng;
    /* separator for real numbers pairs */
    return ',';
}

<DATAFIELD>{REAL1}|{REAL2}|{REAL3} {
    svg_charno += yyleng;
    std::string s = svg_text;
    std::replace( s.begin(), s.end(), Settings::toDecimalPoint, Settings::fromDecimalPoint);
    svg_lval.f_val = strtof(s.c_str(), NULL);
    return FLOAT;
}

<DATAFIELD>{ANY_TEXT} {
    svg_charno += yyleng;
    svg_lval.s_val = strdup(svg_text);
    return STRING;
}

. { /* any other character is invalid */
    fprintf (stderr, "line %d pos %d: syntax error, unrecognized character: `%s'\n", svg_lineno, svg_charno, svg_text);
    return InvalidCharacter;
}

%%

                  
