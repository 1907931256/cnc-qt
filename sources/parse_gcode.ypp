/* -*-c++-*- */

%{
/*
 * parse_gcode.y - parser for a GCODE data file
 *
 * Copyright (C) 2018 Eduard Kalinowski <eduard_kalinowski@yahoo.de>
 *
 * This is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this package; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street - Fifth Floor,
 * Boston, MA 02110-1301, USA.
 *
 * $Id$
 *
 */

#if HAVE_CONFIG_H
# include <config.h>
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define YYERROR_VERBOSE 42
#define YYDEBUG 1
#define YYMAXDEPTH 1000000

#define __NOEXTENSIONS__ 1


#include <QString>
#include <QChar>
#include <QDebug>


#include "Settings.h"

#include "GCode.h"

extern int gcode_lex();
extern int gcode_scan_buf(char *base);
extern void gcode_error(char*);

// static int gcodelineno = 0;
extern int gcode_lineno;
static int gcodecharno = 0;


bool set_data_float(char c, float f);

// gcode_lineno = 0;

// init of first gcode data
GCodeData *g_data = new GCodeData();

%}

%name-prefix "gcode_"


%token NL_CHAR
%token CHAR
%token COMMENTAR
%token NEW_LINE
%token INT
%token FLOAT

%token InvalidCharacter

%token Eol

%union {
    int       i_val;
    float     f_val;
    char      c_val;
    char*     s_val;
}


%type <i_val> INT
%type <f_val> FLOAT
%type <c_val> NL_CHAR CHAR
%type <s_val> COMMENTAR


%start parse_gcode

%%

parse_gcode: 
        | glines
        ;


glines: gline glines
        | gline
        ;


gline:  NL_CHAR INT
        {
            // the new line, create new object
            // for cases, when line begins with g, m command or n: label
            g_data =  new GCodeData(g_data);
            g_data->numberLine = gcode_lineno;

            switch ($1 | 0x20){
                case 'n' :
                    g_data->labelNum = $2;
                    break;

                case 'g' :
                    g_data->gCmd = $2;
                    switch ($2){
                        case 0:
                            g_data->movingCode = RAPID_LINE_CODE;
                            break;
                            
                        case 1:
                        case 2:
                        case 3:
                            g_data->movingCode = FEED_LINE_CODE;
                            break;
                            
                        case 17:
                            g_data->plane = XY;
                            break;
                            
                        case 18:
                            g_data->plane = YZ;
                            break;
                            
                        case 19:
                            g_data->plane = ZX;
                            break;
                    }
                    break;

                case 'm' :
                    g_data->gCmd = -1;
                    g_data->mCmd = $2;
                    break;
 
                default:
                    // not decoded, it's possible other code? 
                    if (set_data_float(($1 | 0x20), (float) $2) == false) {
                        g_data->decoded = false;
                        printf("not decoded char %c, line %d\n", $1, gcode_lineno);
                    }
                    break;
            }
        }
        | NL_CHAR FLOAT
        {
            // when line begins with coordinates 
            g_data =  new GCodeData(g_data);
            g_data->numberLine = gcode_lineno;
            
            set_data_float(($1 | 0x20), $2);
        }
        | NL_CHAR
        {
            // store coordinates
        }
        | CHAR INT 
        {
            switch ($1 | 0x20){
                case 'g' : {
                    // new command in line, create new object
                    GCodeParser::gCodeVector << *g_data;
                    g_data =  new GCodeData(g_data);
                    g_data->numberLine = gcode_lineno;
                    g_data->gCmd = $2; 
                    
                    if ($2 == 1 || $2 == 2 || $2 == 3) {
                        g_data->movingCode = FEED_LINE_CODE;
                    }
                    if ($2 == 0) {
                        g_data->movingCode = RAPID_LINE_CODE;
                    }
                    break;
                }

                case 'm' : {
                    g_data->mCmd = $2;
                    break;
                }
 
                default:
                    if (set_data_float(($1 | 0x20), (float) $2) == false) {
                        g_data->decoded = false;
                    }
                    break;
            }
        }
        | CHAR FLOAT 
        {
            set_data_float(($1 | 0x20), $2);
        }
        | CHAR
        {
            // store coordinates
        }
        | COMMENTAR 
        {
           g_data->lineComment = QString($1).simplified();
           free($1);
        }
        | NEW_LINE
        {
            GCodeParser::gCodeVector << *g_data;
        }
        ;

%%



bool set_data_float(char c, float f) {
    switch (c){
        case 'x':
            g_data->baseCoord.setX(f);
            break;
            
        case 'y':
            g_data->baseCoord.setY(f);
            break;
            
        case 'z':
            g_data->baseCoord.setZ(f);
            break;
            
        case 'i':
            g_data->useExtCoord = IJK; // TODO check conflicts
            g_data->extCoord.setX(f);
            break;
            
        case 'j':
            g_data->useExtCoord = IJK; // TODO check conflicts
            g_data->extCoord.setY(f);
            break;
            
        case 'k':
            g_data->useExtCoord = IJK; // TODO check conflicts
            g_data->extCoord.setZ(f);
            break;
            
        case 'a':
            g_data->useExtCoord = ABC; // TODO check conflicts
            g_data->extCoord.setX(f);
            break;
            
        case 'b':
            g_data->useExtCoord = ABC; // TODO check conflicts
            g_data->extCoord.setY(f);
            break;
            
        case 'c':
            g_data->useExtCoord = ABC; // TODO check conflicts
            g_data->extCoord.setZ(f);
            break;
            
        case 'r': // radius
            g_data->radius = f;
            break;
            
        case 's': // pause sec
            if (g_data->gCmd == 4){
                g_data->pauseMSec = f*1000.0;
            }
            break;
            
        case 'p': // pause msec
            if (g_data->gCmd == 4){
                g_data->pauseMSec = f;
            }
            break;
            
        case 'f': // feed
            g_data->rapidVelo = f;
            break;
            
        case 'd': // diameter
            g_data->toolDiameter = f;
            break;
            
        case 't': // change tool
            g_data->toolChange = true;
            g_data->toolNumber = f;
            break;
            
        default:
            g_data->decoded = false;
            printf("not decoded char %c, line %d\n", c, gcode_lineno);
            return false;
            break;
    }
    return true;
}


int gcode_error (const char * error) {
  fprintf (stderr, "line %d: %s\n", gcode_lineno, error);
  return 0;
}
