/* -*-c++-*- */

%{
/*
 * parse_gcode.ypp - parser for a GCODE data file
 *
 * Copyright (C) 2018 Eduard Kalinowski <eduard_kalinowski@yahoo.de>
 *
 * This is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this package; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street - Fifth Floor,
 * Boston, MA 02110-1301, USA.
 *
 * $Id$
 *
 */

#if HAVE_CONFIG_H
# include <config.h>
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define YYERROR_VERBOSE 42
#define YYDEBUG 1
#define YYMAXDEPTH 1000000

#define __NOEXTENSIONS__ 1


#include <QString>
#include <QChar>
#include <QDebug>
#include <QVector>


#include "Settings.h"


#include "GCode.h"

// // static int gcodelineno = 0;
extern int gcode_lineno;
static int gcodecharno = 0;

extern int gcode_parse (void);
extern void gcode_error (const char *c);
extern int gcode_lex (void);
extern int gcode_lex_destroy (void);


bool set_data_float(char c, float f);

// gcode_lineno = 0;


GCodeData *gcode_data;

%}

%name-prefix "gcode_"


%token PARAM_CHAR
%token CHAR
%token LABEL
%token CMD_CHAR
%token COMMENTAR
%token VAR_DEF
%token VARIABLE
%token NEW_LINE
%token INT
%token FLOAT
%token TERM
%token EQUAL 
%token EQ
%token GE
%token LE
%token GT
%token LT
%token IF
%token ELSE
%token ENDIF
%token WHILE
%token ENDWHILE
%token POW
%token SIN
%token COS
%token SQRT

%token InvalidCharacter


%token Eol

%left '*' '/' 
%left EQ NE GT LT GE LE
%left MINUS PLUS MUL DIV


%union {
    int       i_val;
    float     f_val;
    char      c_val;
    char*     s_val;
    class DataOperation* op;
}


%type <i_val> INT
%type <f_val> FLOAT
%type <c_val> CMD_CHAR PARAM_CHAR CHAR LABEL
%type <s_val> COMMENTAR VAR_DEF VARIABLE
%type <op>    expr


%start parse_gcode

%%

parse_gcode: 
        | glines
        ;


glines: gline glines
        | gline
        ;


gline:  VAR_DEF FLOAT
        {
            // TODO: check, variable exists?
            qInfo() << $1 << $2;
            GData::dataVaris.insert($1, $2);
        }
        | CMD_CHAR INT
        {
            // the new line, create new object
            // for cases, when line begins with g, m command or n: label
            if (GData::dataVector.count() == 0){
                gcode_data = new GCodeData();
            }
            else {
                gcode_data = new GCodeData(gcode_data);
            }
            gcode_data->numberLine = gcode_lineno;

            switch ($1 | 0x20){
                case 'g' :
                    gcode_data->gCmd = $2;
                    switch ($2){
                        case 0:
                            gcode_data->movingCode = RAPID_LINE_CODE;
                            break;
                            
                        case 1:
                        case 2:
                        case 3:
                            gcode_data->movingCode = FEED_LINE_CODE;
                            break;
                            
                        case 17:
                            gcode_data->plane = XY;
                            break;
                            
                        case 18:
                            gcode_data->plane = YZ;
                            break;
                            
                        case 19:
                            gcode_data->plane = ZX;
                            break;
                    }
                    break;

                case 'm' :
                    gcode_data->gCmd = -1;
                    gcode_data->mCmd = $2;
                    break;
 
                default:
                    // not decoded, it's possible other code? 
#if 0
                    if (set_data_float(($1 | 0x20), (float) $2) == false) {
                        gcode_data->decoded = false;
                        printf("not decoded char %c, line %d\n", $1, gcode_lineno);
                    }
#endif
                    break;
            }
        }
        | LABEL INT 
        {
             gcode_data->labelNum = $2;
        }
        | PARAM_CHAR expr
        {
            // when line begins with coordinates 
            qInfo() << $1;
            gcode_data = new GCodeData(gcode_data);
            gcode_data->numberLine = gcode_lineno;
            
            gcode_lval.c_val = $1;
        }
        | CHAR
        {
            // store coordinates
        }
        | COMMENTAR 
        {
           gcode_data->lineComment = QString($1).simplified();
           free($1);
        }
        | NEW_LINE
        {
            if (gcode_data) {
                GData::dataVector << *gcode_data;
            }
        }
        ;
        
// EXPR:   TERM 
//         | EXPR '+' TERM 
//         | EXPR '-' TERM 
//         ;
//         
// TERM:   FLOAT 
//         | TERM '*' FLOAT 
//         | TERM '/' FLOAT
//         ;

// exprs:  expr
//         {
//             $$ = $1;
//         }
//         | exprs expr
//         {
//             $$ << $1;
//         }
//         ;

expr:   '[' expr ']'
        {
            qInfo() << "klammer";
            $$ = new DataOperation();
        }
        | FLOAT
        {
            set_data_float((gcode_lval.c_val | 0x20), $1);
            qInfo() << "expr float" << $1;
//             $$->val = $1;
        }
        | VARIABLE
        {
            qInfo() <<"expr";
            if (GData::dataVaris.contains($1)) {
                $$->val = GData::dataVaris[$1];
            }
            else {
                qCritical() << "definition of variable" << $1 << "not found";
            }
        }
        | VARIABLE '=' expr
        {
        }
        | NEW_LINE
        {
            if (gcode_data) {
                GData::dataVector << *gcode_data;
            }
        }
        | expr PLUS expr
        {
            qInfo() <<"plus";
            $$->opCode = PLUS;
            $$->op1 = $1;
            $$->op2 = $3;
            $$->val = $1->val + $3->val;
        }
        | expr MINUS expr
        {
            qInfo() <<"minus";
            $$->opCode = MINUS;
            $$->op1 = $1;
            $$->op2 = $3;
            $$->val = $1 - $3;
        }
        | expr MUL expr 
        {
            qInfo() <<"mul";
            $$->opCode = MUL;
            $$->op1 = $1;
            $$->op2 = $3;
            $$->val = $1->val * $3->val;
        }
        | expr DIV expr
        {
            qInfo() <<"div";
            $$->opCode = DIV;
            $$->op1 = $1;
            $$->op2 = $3;
            // TODO check $3 is zero?
            $$->val = $1->val / $3->val;
        }
        ;

%%



bool set_data_float(char c, float f) {
    switch (c){
        case 'x':
            gcode_data->baseCoord.setX(f);
            break;
            
        case 'y':
            gcode_data->baseCoord.setY(f);
            break;
            
        case 'z':
            gcode_data->baseCoord.setZ(f);
            break;
            
        case 'i':
            gcode_data->useExtCoord = IJK; // TODO check conflicts
            gcode_data->extCoord.setX(f);
            break;
            
        case 'j':
            gcode_data->useExtCoord = IJK; // TODO check conflicts
            gcode_data->extCoord.setY(f);
            break;
            
        case 'k':
            gcode_data->useExtCoord = IJK; // TODO check conflicts
            gcode_data->extCoord.setZ(f);
            break;
            
        case 'a':
            gcode_data->useExtCoord = ABC; // TODO check conflicts
            gcode_data->extCoord.setX(f);
            break;
            
        case 'b':
            gcode_data->useExtCoord = ABC; // TODO check conflicts
            gcode_data->extCoord.setY(f);
            break;
            
        case 'c':
            gcode_data->useExtCoord = ABC; // TODO check conflicts
            gcode_data->extCoord.setZ(f);
            break;
            
        case 'u':
            gcode_data->useExtCoord = UVW; // TODO check conflicts
            gcode_data->extCoord.setX(f);
            break;
            
        case 'v':
            gcode_data->useExtCoord = UVW; // TODO check conflicts
            gcode_data->extCoord.setY(f);
            break;
            
        case 'w':
            gcode_data->useExtCoord = UVW; // TODO check conflicts
            gcode_data->extCoord.setZ(f);
            break;
            
        case 'r': // radius
            gcode_data->radius = f;
            break;
            
        case 's': // pause sec
            if (gcode_data->gCmd == 4){
                gcode_data->pauseMSec = f*1000.0;
            }
            break;
            
        case 'p': // pause msec
            if (gcode_data->gCmd == 4){
                gcode_data->pauseMSec = f;
            }
            break;
            
        case 'f': // feed
            gcode_data->rapidVelo = f;
            break;
            
        case 'd': // diameter
            gcode_data->toolDiameter = f;
            break;
            
        case 't': // change tool
            gcode_data->toolChange = true;
            gcode_data->toolNumber = f;
            break;
            
        default:
            gcode_data->decoded = false;
            printf("not decoded char %c, line %d\n", c, gcode_lineno);
            return false;
            break;
    }
    return true;
}


void gcode_error (const char * error) {
  fprintf (stderr, "line %d: %s\n", gcode_lineno, error);
//   return 0;
}
