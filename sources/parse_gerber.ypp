/* -*-c++-*- */

%{
/****************************************************************************
 * C# to Qt portation, Linux developing                                     *
 * flex/bison Gerber parser                                                 *
 * Copyright (C) 2015-2018 by Eduard Kalinowski                             *
 * Germany, Lower Saxony, Hanover                                           *
 * eduard_kalinowski@yahoo.de                                               *
 *                                                                          *
 * C# project CNC-controller-for-mk1                                        *
 * https://github.com/selenur/CNC-controller-for-mk1                        *
 *                                                                          *
 * The Qt project                                                           *
 * https://github.com/eduard-x/cnc-qt                                       *
 *                                                                          *
 * CNC-Qt is free software; may be distributed and/or modified under the    *
 * terms of the GNU General Public License version 3 as published by the    *
 * Free Software Foundation and appearing in the file LICENSE_GPLv3         *
 * included in the packaging of this file.                                  *
 *                                                                          *
 * This program is distributed in the hope that it will be useful,          *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of           *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            *
 * GNU General Public License for more details.                             *
 *                                                                          *
 * You should have received a copy of the GNU Lesser General Public         *
 * License along with CNC-Qt. If not, see  http://www.gnu.org/licenses      *
 ****************************************************************************/
 
#if HAVE_CONFIG_H
# include <config.h>
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define YYERROR_VERBOSE 42
#define YYDEBUG 1
#define YYMAXDEPTH 1000000

#define __NOEXTENSIONS__ 1


#include <QString>
#include <QChar>
#include <QDebug>


#include "Settings.h"

#include "Gerber.h"

/*


// static int gerberlineno = 0;*/
extern int gerber_parse (void);
extern void gerber_error (const char *c);
extern int gerber_lex (void);
extern int gerber_lex_destroy (void);

extern int gerber_lineno;


// init of first gerber data
ParserData *gerber_data;// = new GerberData();

%}

%name-prefix "gerber_"


%token XPARAM YPARAM IPARAM JPARAM
%token NEW_LINE
%token ABS REL SET_INCH SET_MM
%token NEGATIVE POSITIVE
%token MIRRORING

%token InvalidCharacter


%union {
    int       i_val;
    float     f_val;
    char      c_val;
    char*     s_val;
}


%token <i_val> INTEGER D_OPCODE G_OPCODE
%token <f_val> FLOAT APARAM BPARAM 
%token <s_val> FMT
%token <s_val> APER_MACRO_NAME APER_DICTIONARY APER_SELECT


%start parse_gerber

%%

parse_gerber: 
        | glines
        ;


glines: gline 
        | gline glines
        ;


gline:  XPARAM INTEGER
        {
            qInfo() << "x" << $2;
        }
        | YPARAM INTEGER 
        {
            qInfo() << "y" << $2;
        }
        | IPARAM INTEGER
        {
            qInfo() << "i" << $2;
        }
        | JPARAM INTEGER
        {
            qInfo() << "j" << $2;
        }
        | SET_MM
        {
        }
        | APARAM 
        {
        }
        | MIRRORING
        {
        }
        | BPARAM  
        {
        }
        | POSITIVE
        {
        }
        | NEGATIVE
        {
        }
        | INTEGER
        {
        }
        | FLOAT 
        {
        }
        | D_OPCODE
        {
        }
        | G_OPCODE
        {
        }
        | APER_MACRO_NAME
        {
        }
        | APER_DICTIONARY
        {
        }
        | APER_SELECT
        {
        }
        | SET_INCH
        {
        }
        | FMT
        {
            if ($1[0] == 'L') {
                /* OMIT_LEADING_ZEROS */
            }
            if ($1[0] == 'T') {
                /* OMIT_TRAILING_ZEROS */
            }
            if ($1[1] == 'A') {
                /* ABSOLUTE_NOTATION */
            }
            if ($1[1] == 'I') {
                /* INCREMENTAL_NOTATION */
            }
        }
        | IPARAM FLOAT
        {
            qInfo() << "i" << $2;
        }
        | JPARAM FLOAT
        {
            qInfo() << "j" << $2;
        }
        | NEW_LINE
        {
            Parser::dataVector << *gerber_data;
        }
        ;

%%


extern int gerber_charno;

void gerber_error (const char * error) {
  fprintf (stderr, "line %d pos %d: %s\n", gerber_lineno, gerber_charno, error);
//   return 0;
}
