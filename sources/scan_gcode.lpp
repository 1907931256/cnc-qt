/* -*-c-*- */

%{
/*
 * scan_gcode.lpp - scanner for a GCODE data file
 *
 * Copyright (C) 2018 Eduard Kalinowski <eduard_kalinowski@yahoo.de>
 *
 * This is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this package; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street - Fifth Floor,
 * Boston, MA 02110-1301, USA.
 *
 * $Id$
 *
 */

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-register"
#endif

#if HAVE_CONFIG_H
# include <config.h>
#endif


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#include <QVector>

#ifdef __MINGW32__
#include <io.h>
#endif

#ifdef HAVE_UNISTD_H
#include <unistd.h>
#endif



#if !HAVE_STRCHR
# define strchr  index
# define strrchr rindex
#endif



// this generated header file from parse_gcode.ypp
#include "parse_gcode.h"

#include "Settings.h"
#include "GCode.h"

// extern void gcode_error (const char *);
// extern int gcode_lex (void);
// extern int gcode_lex_destroy (void);

extern int gcode_lineno;


%}


WSPACE   [ \t\r]+
DIGIT    [0-9]
COMMENT  \(.+\)
EXPONENT [Ee][+-]?{DIGIT}+
INTEGER  [+-]?{DIGIT}+
REAL     [+-]?{DIGIT}+([.,]{DIGIT}+)?{EXPONENT}?
VARI     [+-]?#<.+>
DECIMAL  {DIGIT}+
DIGITS   {DIGIT}+
Eol      \r?\n


EQ       "EQ"
GE       "GE"
LE       "LE"
GT       "GT"
LT       "LT"
IF       "IF"
ELSE     "ELSE"
ENDIF    "ENDIF"
WHILE    "WHILE"
ENDWHILE "ENDWHILE"
POW      "**"
SIN      "SIN"
COS      "COS"
SQRT     "SQRT"

MINUS    "-"
PLUS     "+"
MUL      "*"
DIV      "/"


%option caseless yylineno noyywrap batch nounput noinput prefix="gcode_"


%%

[GM] { // commands
    gcode_lval.c_val = gcode_text[0]; 
    gcode_lval.i_val = atoi(&gcode_text[1]); 
    return CMD_CHAR;
}

[NO] { // label
    gcode_lval.c_val = gcode_text[0]; 
    gcode_lval.i_val = atoi(&gcode_text[1]); 
    return LABEL;
}

[A-FH-MP-Z] { // params
    gcode_lval.c_val = gcode_text[0]; 
    return PARAM_CHAR; 
}

{VARI}"=" {
    gcode_lval.s_val = strndup(gcode_text, yyleng - 1);
    return VAR_DEF;
}

{VARI} {
    gcode_lval.s_val = strdup(gcode_text);
    return VARIABLE;
}

{DIGITS} { 
    gcode_lval.i_val = atoi(gcode_text); 
    return INT; 
}

{REAL} {
    std::string s = gcode_text;
    std::replace( s.begin(), s.end(), Settings::toDecimalPoint, Settings::fromDecimalPoint);
    gcode_lval.f_val = atof(s.c_str());
    
    return FLOAT;
}

^{Eol} { /* nothing*/ }

{Eol} { return NEW_LINE; /* call NEW_LINE: push decoded data to vector */ }


^{COMMENT}{Eol}+ { /* new line commentar */}


<*>{COMMENT} { 
    gcode_lval.s_val = strndup(&gcode_text[1], yyleng -2); 
    return COMMENTAR;
}

"%".*{Eol}+ { /* ignore comments, do nothing */ }

";".*{Eol}+ { /* ignore comments, do nothing */ }


<*>{WSPACE}+  { /* skip end of line and spaces */ }

<*>. { /* any other character is invalid */
  fprintf (stderr,
	   "line %d: syntax error, unrecognized character: `%s'\n",
	   gcode_lineno, gcode_text);
  return InvalidCharacter;
}

%%

                  
