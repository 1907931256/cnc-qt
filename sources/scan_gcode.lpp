/* -*-c-*- */

%{
/****************************************************************************
 * C# to Qt portation, Linux developing                                     *
 * flex/bison G-Code parser                                                 *
 * Copyright (C) 2015-2018 by Eduard Kalinowski                             *
 * Germany, Lower Saxony, Hanover                                           *
 * eduard_kalinowski@yahoo.de                                               *
 *                                                                          *
 * C# project CNC-controller-for-mk1                                        *
 * https://github.com/selenur/CNC-controller-for-mk1                        *
 *                                                                          *
 * The Qt project                                                           *
 * https://github.com/eduard-x/cnc-qt                                       *
 *                                                                          *
 * CNC-Qt is free software; may be distributed and/or modified under the    *
 * terms of the GNU General Public License version 3 as published by the    *
 * Free Software Foundation and appearing in the file LICENSE_GPLv3         *
 * included in the packaging of this file.                                  *
 *                                                                          *
 * This program is distributed in the hope that it will be useful,          *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of           *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            *
 * GNU General Public License for more details.                             *
 *                                                                          *
 * You should have received a copy of the GNU Lesser General Public         *
 * License along with CNC-Qt. If not, see  http://www.gnu.org/licenses      *
 ****************************************************************************/

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-register"
#endif

#if HAVE_CONFIG_H
# include <config.h>
#endif


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#include <QVector>

#ifdef __MINGW32__
#include <io.h>
#endif

#ifdef HAVE_UNISTD_H
#include <unistd.h>
#endif


#if !HAVE_STRCHR
# define strchr  index
# define strrchr rindex
#endif



// this generated header file from parse_gcode.ypp
#include "parse_gcode.h"

#include "Settings.h"
#include "GCode.h"


extern int gcode_lineno;


%}


WSPACE   [ \t\r]+
DIGITS   [0-9]+
COMMENT  \(.+\)
PARAM    [A-FH-MP-Z]
INTEGER  [+-]?{DIGITS}
REAL1    [+-]?{DIGITS}?[.,]{DIGITS}
REAL2    [+-]?{DIGITS}[.,]{DIGITS}?
VARI     #<[A-Z_]+>
COMMAND  [GM]
EOL      [\n]+
OPER     [\+\-\/\*\=\[\]]

EQ       "EQ"
GE       "GE"
NE       "NE"
LE       "LE"
GT       "GT"
LT       "LT"
IF       "IF"
ELSE     "ELSE"
ENDIF    "ENDIF"
WHILE    "WHILE"
ENDWHILE "ENDWHILE"
GOTO     "GOTO"
POW      "**"
SIN      "SIN"
COS      "COS"
SQRT     "SQRT"



%option caseless yylineno noyywrap batch nounput noinput prefix="gcode_"


%%

{COMMAND} { // commands
    gcode_lval.c_val = gcode_text[0];
    return CMD_CHAR;
}

{POW} {
    return POW_FUNC;
}

{SQRT} {
    return SQRT_FUNC;
}

{SIN} {
    return SIN_FUNC;
}

{COS} {
    return COS_FUNC;
}

{EQ} {
    return CMP_EQ;
}

{LE} {
    return CMP_LE;
}

{NE} {
    return CMP_NE;
}

{GT} {
    return CMP_GT;
}

{LT} {
    return CMP_LT;
}

{GE} {
    return CMP_GE;
}

[NO] { // label
    gcode_lval.c_val = gcode_text[0];
    return LABEL;
}

{OPER} {
    return gcode_text[0];
}

{PARAM} { // params
    gcode_lval.c_val = gcode_text[0]; 
    return PARAM_CHAR; 
}

{VARI} {
    gcode_lval.s_val = strdup(gcode_text);
    return VARIABLE;
}

{INTEGER} {
    gcode_lval.i_val = strtol(gcode_text, NULL, 10); 
    return IVAL; 
}

{REAL1}|{REAL2} {
    std::string s = gcode_text;
    std::replace( s.begin(), s.end(), Settings::toDecimalPoint, Settings::fromDecimalPoint);
    gcode_lval.f_val = strtof(s.c_str(), NULL);
    return FVAL;
}

{EOL} {
    return NEW_LINE;
}

{COMMENT} {
    gcode_lval.s_val = strdup(gcode_text); 
    return COMMENTAR;
}

"%".* {
    gcode_lval.s_val = strdup(gcode_text); 
    return COMMENTAR;
}

";".* {
    gcode_lval.s_val = strdup(gcode_text); 
    return COMMENTAR;
}


{WSPACE}+  { /* ignore spaces */ }

<*>. { /* any other character is invalid */
  fprintf (stderr,
       "line %d: syntax error, unrecognized character: `%s'\n",
       gcode_lineno, gcode_text);
  return InvalidCharacter;
}

%%


