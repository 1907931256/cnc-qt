PROJECT(cncqt)

# Configure CMake ...
CMAKE_MINIMUM_REQUIRED(VERSION 2.8 FATAL_ERROR)
CMAKE_POLICY(SET CMP0003 OLD)
CMAKE_POLICY(SET CMP0015 OLD)

# set the Qt version to 4 or 5
OPTION (USE_QT5 "Using of Qt5 version for compiling" ON)

IF(${USE_QT5})
    SET(USE_QT_VERSION 5)
ELSE(${USE_QT5})
    SET(USE_QT_VERSION 4)
ENDIF(${USE_QT5})



SET( CNCQT_CPACK_PACKAGE_SHLIBDEPS ON )
# # SET(FILES_TO_TRANSLATE)

#disable -rdynamic
SET(CMAKE_SHARED_LIBRARY_LINK_CXX_FLAGS "")
SET(CMAKE_SHARED_LIBRARY_LINK_C_FLAGS "")


# FILE (GLOB TRANSLATIONS_FILES ${CMAKE_CURRENT_SOURCE_DIR}/translations/*.ts)

# OPTION (UPDATE_TRANSLATIONS "Update source translation ${CMAKE_CURRENT_SOURCE_DIR}/translations/*.ts" OFF)


MESSAGE(STATUS "Qt version for compiling: " ${USE_QT_VERSION})

# IF(NOT ${USE_QT_VERSION} MATCHES "4" AND NOT ${USE_QT_VERSION} MATCHES "5")
#   MESSAGE(FATAL_ERROR "-- Qt version must be set to 4 or 5!")
# ENDIF()

#debug or release
# SET(USE_DEBUGGER false)

OPTION (USE_DEBUGGER "Include in binary file debug information" OFF)

#enable or disable profiling info
# SET(USE_PROFILER false)

OPTION (USE_PROFILER "Include in binary file profiling information" OFF)



IF(${USE_DEBUGGER})
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS_DEBUG} -Wall")
ELSE()
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS_RELEASE} -Wall")
ENDIF()

MESSAGE(STATUS "CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS}")

INCLUDE(CheckIncludeFile)
INCLUDE(CheckIncludeFileCXX)
INCLUDE(TestCXXAcceptsFlag)
INCLUDE(CheckCXXCompilerFlag)


# SET(TARGET_NAME cnc-qt )
SET(CMAKE_HELPERS_BINARY_DIR ${PROJECT_SOURCE_DIR}/cmake)
SET(CMAKE_HELPERS_SOURCE_DIR ${PROJECT_SOURCE_DIR}/cmake)
LIST(APPEND CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)

SET(CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake")



# INCLUDE(CNCQTOutOfSourceBuild) # Disallow in-source builds
INCLUDE(FindPkgConfig)

INCLUDE(GenerateDEF) # Convenience macro for linking Win32 DLLs using MSVC
INCLUDE(Dependencies)
INCLUDE(WordSize) # Detect 32/64 bit platform
INCLUDE(Compiler) # Detect problematic compilers

# INCLUDE(FindOpenGL)
# FIND_PACKAGE(OpenGL)

# find_package(Qt5Core)
# find_package(Qt5Widgets)
# find_package(Qt5Gui)
# find_package(Qt5OpenGL)

SET(QtApp_RCCS  "${CMAKE_CURRENT_SOURCE_DIR}/sources/CNC-Qt.qrc")

SET(CURRENT_BUILD_DIR ${CMAKE_CURRENT_BINARY_DIR})

INCLUDE(FindLibUSB-1.0)
# INCLUDE(FindLibUSB)


SET (QT_USE_QTOPENGL TRUE)
# set (QT_OPENGL_ES_2 TRUE)




IF(NOT ${LIBUSB_VERSION} LESS "1.0.16")
  MESSAGE(STATUS "LibUSB version ${LIBUSB_VERSION}")
ELSE()
  MESSAGE(FATAL_ERROR "-- LibUSB version ${LIBUSB_VERSION} TOO OLD! Please Install this library newer as 1.0.16")
ENDIF()

# Set the CNC-Qt version
FILE(READ "HISTORY" DESCRIBE_STRING)
STRING(REGEX MATCH "([0-9]+\\.[0-9]+\\.[0-9]+)" CNCQT_VERSION "${DESCRIBE_STRING}" )


MESSAGE(STATUS "Version info: ${CNCQT_VERSION}") 
SET(VERSION ${CNCQT_VERSION})

IF(WIN32)
  EXECUTE_PROCESS (
    COMMAND "cmd" " /c date /t"
    OUTPUT_VARIABLE BUILD_DATE
    OUTPUT_STRIP_TRAILING_WHITESPACE)
ELSE()
  EXECUTE_PROCESS (
    COMMAND date +"%d.%m.%Y"
    OUTPUT_VARIABLE BUILD_DATE
    OUTPUT_STRIP_TRAILING_WHITESPACE)
    STRING(REGEX REPLACE "\"" "" BUILD_DATE ${BUILD_DATE})
ENDIF()

MESSAGE(STATUS "Version build date: ${BUILD_DATE}")

# 
SET(CNCQT_PACKAGE cncqt)
# SET(CNCQT_VERSION ${CNCQT_MAJOR_VERSION}.${CNCQT_MINOR_VERSION}.${CNCQT_RELEASE_VERSION}.${CNCQT_BUILD_VERSION})
SET(CNCQT_HOST ${CMAKE_SYSTEM} ${CMAKE_SYSTEM_PROCESSOR})
SET(CNCQT_COPYRIGHT "Copyright (c) 2015-2017, Sergey Zheigurov, Eduard Kalinowski. All Rights Reserved.")
SET(CNCQT_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX})

# Setup high-level build options
IF(MSVC)
  SET(CNCQT_ENABLE_SYMBOL_VISIBILITY_DEFAULT ON)
ELSE(MSVC)
  SET(CNCQT_ENABLE_SYMBOL_VISIBILITY_DEFAULT OFF)
ENDIF(MSVC)


SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -lusb-1.0")

IF (CMAKE_COMPILER_IS_GNUCC AND CMAKE_CXX_COMPILER_VERSION VERSION_LESS 4.7)
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x -fno-exceptions -fno-rtti")
ELSE()
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -fno-exceptions -fno-rtti")
ENDIF()

# options for gprof 
IF(${USE_PROFILER})
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pg")
  SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -pg")
  SET(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -pg")
  # after execution of program: gprof ./build/cncqt 
  # and get the information from gprof.txt file
  MESSAGE(STATUS "Compile with profiling information")
ELSE()
  MESSAGE(STATUS "Compile without profiling information")
ENDIF()



IF(${USE_QT_VERSION} MATCHES "4")
    FIND_PACKAGE(Qt4 COMPONENTS QtCore QtGui QtOpenGL REQUIRED)

    IF(NOT QT4_FOUND)
        MESSAGE(FATAL_ERROR "Qt4 could not be found. "
        "If it's INSTALLed in a non-standard location, specify the path to qmake in QT_QMAKE_EXECUTABLE. "
        "You can do it in interactive mode (ccmake instead of cmake) or using -DVAR=VAL syntax.")
    ENDIF()
ELSE()
    FIND_PACKAGE(Qt5 COMPONENTS Core Gui Widgets OpenGL REQUIRED QUIET)

#     FIND_PACKAGE(Qt5 COMPONENTS LinguistTools  REQUIRED QUIET)
    
    IF(NOT Qt5Widgets_FOUND)
        MESSAGE(FATAL_ERROR "Qt5 could not be found. "
        "If it's INSTALLed in a non-standard location, specify the path to qmake in QT_QMAKE_EXECUTABLE. "
        "You can do it in interactive mode (ccmake instead of cmake) or using -DVAR=VAL syntax.")
    ENDIF(NOT Qt5Widgets_FOUND)
ENDIF()

INCLUDE_DIRECTORIES( ${LIBUSB_INCLUDE_DIRS})


IF(${USE_QT_VERSION} MATCHES "4")
    INCLUDE_DIRECTORIES(${QT_INCLUDES})
    MESSAGE(STATUS "QT_INCLUDES ${QT_INCLUDES}")
#     ADD_DEFINITIONS(-DGL_IMPLEMENTATION_GL)
    LINK_DIRECTORIES(${QT_LIBRARY_DIR} ${LIBUSB_LIBRARIES})
ELSE()
    INCLUDE_DIRECTORIES(${QT_INCLUDES} ${Qt5Widgets_INCLUDE_DIRS} ${Qt5OpenGL_INCLUDE_DIRS})
    
#     INCLUDE_DIRECTORIES(${Qt5OpenGL_INCLUDE_DIRS} ${QT_QTOPENGL_INCLUDE_DIR} ${OPENGL_INCLUDE_DIR})
#     INCLUDE_DIRECTORIES(${Qt5OpenGL_INCLUDE_DIRS} ${QT_QTOPENGL_INCLUDE_DIR})
    
#     IF (${Qt5Gui_OPENGL_IMPLEMENTATION} STREQUAL GLESv2)
# #       ADD_DEFINITIONS(-DGL_IMPLEMENTATION_GLES2)
#       MESSAGE(STATUS "Compiling for GLES 2")
#     ELSEIF (${Qt5Gui_OPENGL_IMPLEMENTATION} STREQUAL GL)
# #       ADD_DEFINITIONS(-DGL_IMPLEMENTATION_GL)
#       MESSAGE(STATUS "Compiling for OpenGL")
#     ELSE()
#       MESSAGE(SEND_ERROR "Qt5Gui_OPENGL_IMPLEMENTATION does not contain valid data.")
#     ENDIF()

    MESSAGE(STATUS "QT_INCLUDES ${QT_INCLUDES} ${Qt5Widgets_INCLUDE_DIRS} ${Qt5OpenGL_INCLUDE_DIRS}")

    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${Qt5Widgets_EXECUTABLE_COMPILE_FLAGS} ${Qt5OpenGL_EXECUTABLE_COMPILE_FLAGS}")
#     SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -lQt5OpenGL")
ENDIF()


configure_file (
  "${PROJECT_SOURCE_DIR}/sources/version.h.in"
  "${PROJECT_SOURCE_DIR}/sources/includes/version.h" )


SET ( OBJECTS_DIR temp )
SET ( MOC_DIR temp )
SET ( UI_HEADERS_DIR temp )
SET ( UI_SOURCES_DIR temp )


ADD_SUBDIRECTORY(sources)

INCLUDE_DIRECTORIES( ${CMAKE_SOURCE_DIR} ${CMAKE_CURRENT_SOURCE_DIR}/sources/includes ${LIBUSB_INCLUDE_DIRS})

IF(${USE_QT_VERSION} MATCHES "4")
#     QT4_ADD_TRANSLATION(APP_TRANSLATIONS ${TRANSLATION})
    QT4_WRAP_CPP(APP_HEADERS_MOC ${MAIN_HEADERS} )
    QT4_WRAP_UI(APP_FORMS_HEADERS ${MAIN_FORMS} )
    QT4_ADD_RESOURCES(APP_RESOURCES_RCC ${APP_RESOURCES})
ELSE()
#     QT5_ADD_TRANSLATION(APP_TRANSLATIONS ${TRANSLATION})
    QT5_WRAP_CPP(APP_HEADERS_MOC ${MAIN_HEADERS} )
    QT5_WRAP_UI(APP_FORMS_HEADERS ${MAIN_FORMS} )
    QT5_ADD_RESOURCES(APP_RESOURCES_RCC ${APP_RESOURCES})
ENDIF()


INCLUDE_DIRECTORIES( ${CMAKE_SOURCE_DIR} ${CMAKE_CURRENT_BINARY_DIR})

SOURCE_GROUP( "Generated Files" FILES
    ${MOC_FILES_CPP}
    ${APP_FORMS_HEADERS}
    ${APP_RESOURCES_RCC}
)

ADD_DEFINITIONS(${QT_DEFINITIONS} -DQT_USE_FAST_CONCATENATION -DQT_USE_FAST_OPERATOR_PLUS)

IF(NOT ${USE_DEBUGGER})
    ADD_DEFINITIONS(${QT_DEFINITIONS} -DQT_NO_DEBUG_OUTPUT)
ENDIF()

IF(${USE_QT_VERSION} MATCHES "4")
    INCLUDE(${QT_USE_FILE})
    ADD_DEFINITIONS(${QT_DEFINITIONS} -DQT_PROJECT -DNO_QT3SUPPORT -DDISABLE_QT3SUPPORT)
#     IF(${USE_OPENGL})
#       ADD_DEFINITIONS(${QT_DEFINITIONS})
#     ENDIF()
ELSE()
    ADD_DEFINITIONS( ${Qt5Widgets_DEFINITIONS} ${Qt5OpenGL_DEFINITIONS} -DQT_PROJECT )
#     IF(${USE_OPENGL})
#       ADD_DEFINITIONS( ${Qt5Widgets_DEFINITIONS} ${Qt5OpenGL_DEFINITIONS})
# #      ADD_DEFINITIONS( ${Qt5Widgets_DEFINITIONS} ${QT_OPENGL_DEFINITIONS})
#     ENDIF()
ENDIF()

ADD_EXECUTABLE(${CMAKE_PROJECT_NAME}
    ${APP_SOURCES} 
    ${MAIN_SOURCES}
    ${APP_HEADERS_MOC} 
    ${APP_FORMS_HEADERS} 
#     ${APP_TRANSLATIONS}
    ${APP_RESOURCES_RCC}
)


IF(${USE_QT_VERSION} MATCHES "4")
#   IF(${USE_OPENGL})
#     TARGET_LINK_LIBRARIES(${CMAKE_PROJECT_NAME} ${QT_LIBRARIES} ${OPENGL_LIBRARIES} ${LIBUSB_LIBRARIES})
  TARGET_LINK_LIBRARIES(${CMAKE_PROJECT_NAME} ${QT_LIBRARIES} ${LIBUSB_LIBRARIES})
#   ELSE()
#     TARGET_LINK_LIBRARIES(${CMAKE_PROJECT_NAME} ${QT_LIBRARIES} ${LIBUSB_LIBRARIES})
#   ENDIF()
ELSE()
#   IF(${USE_OPENGL})
#     TARGET_LINK_LIBRARIES(${CMAKE_PROJECT_NAME} ${Qt5Widgets_LIBRARIES} ${Qt5OpenGL_LIBRARIES} ${OPENGL_LIBRARIES} ${LIBUSB_LIBRARIES})
  TARGET_LINK_LIBRARIES(${CMAKE_PROJECT_NAME} ${QT_LIBRARIES} ${Qt5Widgets_LIBRARIES} ${Qt5OpenGL_LIBRARIES} ${LIBUSB_LIBRARIES})
   MESSAGE(STATUS "QT LIBRARIES: ${QT_LIBRARIES} ${Qt5Widgets_LIBRARIES} ${Qt5OpenGL_LIBRARIES} ${Qt5Core_LIBRARIES}")
#   ELSE()
#     TARGET_LINK_LIBRARIES(${CMAKE_PROJECT_NAME} ${Qt5Widgets_LIBRARIES} ${LIBUSB_LIBRARIES})
#   ENDIF()
ENDIF()

ADD_CUSTOM_TARGET (tags
    COMMAND  ctags -R -f tags ${CMAKE_SOURCE_DIR}/sources
    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
)
# MESSAGE("CMAKE_SOURCE_DIR main ${CMAKE_SOURCE_DIR}")
# MESSAGE("CMAKE_CURRENT_BINARY_DIR main ${CMAKE_CURRENT_BINARY_DIR}")
# INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR})


# Setup module enabled/disabled defaults ...
IF(MSVC)
    SET(CNCQT_BUILD_GLX_MODULE_DEFAULT ON)
    SET(CNCQT_BUILD_OSX_MODULE_DEFAULT OFF)
    SET(CNCQT_BUILD_VIRTUAL_OFFSCREEN_MODULE_DEFAULT OFF)
ENDIF(MSVC)

IF(UNIX AND NOT APPLE)
    SET(CNCQT_BUILD_GLX_MODULE_DEFAULT ON)
    SET(CNCQT_BUILD_OSX_MODULE_DEFAULT OFF)
    SET(CNCQT_BUILD_VIRTUAL_OFFSCREEN_MODULE_DEFAULT OFF)
ENDIF(UNIX AND NOT APPLE)

IF(APPLE)
    SET(CNCQT_BUILD_GLX_MODULE_DEFAULT ON)
    SET(CNCQT_BUILD_OSX_MODULE_DEFAULT ON)
    SET(CNCQT_BUILD_VIRTUAL_OFFSCREEN_MODULE_DEFAULT OFF)
ENDIF(APPLE)


OPTION(CNCQT_ENABLE_SYMBOL_VISIBILITY "Minimize the number of symbols exported from shared libraries." ${CNCQT_ENABLE_SYMBOL_VISIBILITY_DEFAULT})
MARK_AS_ADVANCED(CNCQT_ENABLE_SYMBOL_VISIBILITY)

# OPTION(CNCQT_ENABLE_TESTING "Build the CNC-Qt regression test suite." OFF)
# SET(BUILD_TESTING ${CNCQT_ENABLE_TESTING} CACHE INTERNAL "" FORCE)
# INCLUDE(CTest)
# MARK_AS_ADVANCED(DART_TESTING_TIMEOUT)
# IF(CNCQT_ENABLE_TESTING)
#     CMAKE_MINIMUM_REQUIRED(VERSION 2.6.1 FATAL_ERROR)
#     CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/CTestCustom.cmake.in ${CMAKE_CURRENT_BINARY_DIR}/CTestCustom.cmake @ONLY)
# ENDIF(CNCQT_ENABLE_TESTING)

# Find required external packages
#CNCQT_CHECK_REQUIRED_DEPENDENCY(CNCQT_HTTRACK_FOUND "libhttrack2" "http://www.httrack.com" "")
# CNCQT_CHECK_OPTIONAL_DEPENDENCY(CNCQT_BUILD_3DS_IO_MODULE CNCQT_3DS_FOUND "lib3ds")

# Capture system configuration
INCLUDE(SystemConfiguration)

# MSVC configuration
IF(MSVC)
    IF(NOT MSVC)
        SET(CMAKE_EXE_LINKER_FLAGS "-Wl,--enable-runtime-pseudo-reloc" CACHE STRING "" FORCE)
        SET(CMAKE_SHARED_LINKER_FLAGS "-Wl,--enable-runtime-pseudo-reloc -Wl,--export-all-symbols" CACHE STRING "" FORCE)
    ENDIF(NOT MSVC)
ENDIF(MSVC)

# Setup output directories ...
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CNCQT_BINARY_DIR}/bin)

SET(CNCQT_LIBDIR lib) # Allows us to handle 64-bit libs if/when it becomes necessary.

IF(MSVC)
    SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CNCQT_BINARY_DIR}/bin)
ELSE(MSVC)
    SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CNCQT_BINARY_DIR}/${CNCQT_LIBDIR})
ENDIF(MSVC)

# Setup a macro for compiling resources ...
MACRO(CNCQT_COMPILE_RESOURCE OUTPUT INPUT RESOURCE_PATH)

    SET(INPUT_FILE "${CMAKE_CURRENT_SOURCE_DIR}/${INPUT}")
    SET(OUTPUT_FILE "${CMAKE_CURRENT_BINARY_DIR}/${INPUT}.cpp")
    GET_FILENAME_COMPONENT(OUTPUT_PATH ${OUTPUT_FILE} PATH)

    GET_TARGET_PROPERTY(CNCQT_RESOURCE_COMPILER cncqt-resource-compiler LOCATION)

    ADD_CUSTOM_COMMAND(
        DEPENDS cncqt-resource-compiler
        DEPENDS ${INPUT_FILE}
        COMMAND ${CMAKE_COMMAND} -E make_directory ${OUTPUT_PATH}
        COMMAND ${CNCQT_RESOURCE_COMPILER} --input ${INPUT_FILE} --path \"<path>${RESOURCE_PATH}</path>\" --output ${OUTPUT_FILE}
        OUTPUT ${OUTPUT_FILE}
        COMMENT "Compiling resource ${INPUT_FILE}"
        )

    LIST(APPEND ${OUTPUT} ${OUTPUT_FILE})

ENDMACRO(CNCQT_COMPILE_RESOURCE)

# Setup subdirectories ...
CNCQT_CONDITIONAL_BUILD(MSVC gendef)

OPTION(CNCQT_ENABLE_DISTRIBUTION "Enable distribution targets." ON)
CNCQT_CONDITIONAL_BUILD(CNCQT_ENABLE_DISTRIBUTION distribution)

# Hide some cruft ...
MARK_AS_ADVANCED(CMAKE_BACKWARDS_COMPATIBILITY)
MARK_AS_ADVANCED(CMAKE_EXECUTABLE_FORMAT)
MARK_AS_ADVANCED(CMAKE_LIBRARY_OUTPUT_DIRECTORY)
MARK_AS_ADVANCED(CMAKE_OSX_ARCHITECTURES)
MARK_AS_ADVANCED(CMAKE_OSX_DEPLOYMENT_TARGET)
MARK_AS_ADVANCED(CMAKE_OSX_SYSROOT)
MARK_AS_ADVANCED(CMAKE_RUNTIME_OUTPUT_DIRECTORY)
MARK_AS_ADVANCED(CMAKE_USE_CHRPATH)

