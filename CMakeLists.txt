PROJECT(cncqt)

# Configure CMake ...
CMAKE_MINIMUM_REQUIRED(VERSION 2.6 FATAL_ERROR)
CMAKE_POLICY(SET CMP0003 OLD)
CMAKE_POLICY(SET CMP0015 OLD)

# in case of Qt5 set to 5
# or for Qt4 set to 4
SET(USE_QT_VERSION 4)

MESSAGE("Qt version for compiling: " ${USE_QT_VERSION})

IF(NOT ${USE_QT_VERSION} MATCHES "4" AND NOT ${USE_QT_VERSION} MATCHES "5")
    MESSAGE(FATAL_ERROR "-- Qt version must be set to 4 or 5!")
ENDIF()

# INCLUDE(CPack)
INCLUDE(CheckIncludeFile)
INCLUDE(CheckIncludeFileCXX)
INCLUDE(TestCXXAcceptsFlag)
INCLUDE(CheckCXXCompilerFlag)
INCLUDE(FindPkgConfig)

# SET(TARGET_NAME cnc-qt )

SET(CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake")

SET(QtApp_RCCS  "${CMAKE_CURRENT_SOURCE_DIR}/sources/CNC-Qt.qrc")

SET(CURRENT_BUILD_DIR ${CMAKE_CURRENT_BINARY_DIR})

INCLUDE(FindLibUSB-1.0)

# Set the CNC-Qt version
#cat README | grep -E  '^[0-9]+\.[0-9]+\.[0-9]+' | head -n 1
EXECUTE_PROCESS (
   COMMAND cat README
   COMMAND grep -E  "^[0-9]+\\.[0-9]+\\.[0-9]+"
   COMMAND head -n 1
   WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
   RESULT_VARIABLE CNC_MK1_VERSION
   OUTPUT_VARIABLE DESCRIBE_STRING
   OUTPUT_STRIP_TRAILING_WHITESPACE)


IF(NOT DESCRIBE_STRING)
        SET(DESCRIBE_STRING "no valid git tag for ${PROJECT_NAME} found")
ELSE()
        STRING(REGEX MATCH "([0-9]+\\.[0-9]+\\.[0-9]+)" CNC_MK1_VERSION "${DESCRIBE_STRING}" )
        IF (NOT CNC_MK1_VERSION)
                SET(DESCRIBE_STRING "no valid git tag ${PROJECT_NAME}-x.x.x found")
        ENDIF()
ENDIF()

MESSAGE("-- Version info: ${CNC_MK1_VERSION}") 
SET(VERSION ${CNC_MK1_VERSION})

EXECUTE_PROCESS (
      COMMAND date +"%d %b %Y"
      COMMAND sed -e "s/\"//g"
      OUTPUT_VARIABLE BUILD_DATE
      OUTPUT_STRIP_TRAILING_WHITESPACE)

MESSAGE("-- Version build date: ${BUILD_DATE}")

configure_file (
  "${PROJECT_SOURCE_DIR}/sources/version.h.in"
  "${PROJECT_SOURCE_DIR}/sources/version.h" )

# 
SET(CNC_MK1_PACKAGE cncqt)
# SET(CNC_MK1_VERSION ${CNC_MK1_MAJOR_VERSION}.${CNC_MK1_MINOR_VERSION}.${CNC_MK1_RELEASE_VERSION}.${CNC_MK1_BUILD_VERSION})
SET(CNC_MK1_HOST ${CMAKE_SYSTEM} ${CMAKE_SYSTEM_PROCESSOR})
SET(CNC_MK1_COPYRIGHT "Copyright (c) 2015, Sergey Zheigurov, Eduard Kalinowski. All Rights Reserved.")
SET(CNC_MK1_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX})

# Setup high-level build options
IF(MSVC)
    SET(CNC_MK1_ENABLE_SYMBOL_VISIBILITY_DEFAULT ON)
ELSE(MSVC)
    SET(CNC_MK1_ENABLE_SYMBOL_VISIBILITY_DEFAULT OFF)
ENDIF(MSVC)


SET ( QT_USE_QTOPENGL 1 )
SET(CMAKE_CXX_FLAGS "-lusb-1.0")

# options for gprof 
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pg")
SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -pg")
SET(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -pg")
# after execution of program: gprof ./build/cncqt 
# and get the information from gprof.txt file


IF(${USE_QT_VERSION} MATCHES "4")
    FIND_PACKAGE(Qt4 REQUIRED)
    
    INCLUDE(FindQt4)
    INCLUDE(FindOpenGL)
    IF(NOT QT4_FOUND)
        MESSAGE(FATAL_ERROR "Qt4 could not be found. "
        "If it's INSTALLed in a non-standard location, specify the path to qmake in QT_QMAKE_EXECUTABLE. "
        "You can do it in interactive mode (ccmake instead of cmake) or using -DVAR=VAL syntax.")
    ENDIF(NOT QT4_FOUND)
ELSE()
    FIND_PACKAGE(OpenGL REQUIRED)
    FIND_PACKAGE (Qt5Widgets REQUIRED)
#     FIND_PACKAGE (Qt5Multimedia)
    FIND_PACKAGE (Qt5OpenGL REQUIRED)

    IF(NOT Qt5Widgets_FOUND)
        MESSAGE(FATAL_ERROR "Qt5 could not be found. "
        "If it's INSTALLed in a non-standard location, specify the path to qmake in QT_QMAKE_EXECUTABLE. "
        "You can do it in interactive mode (ccmake instead of cmake) or using -DVAR=VAL syntax.")
    ENDIF(NOT Qt5Widgets_FOUND)
ENDIF()


IF(${USE_QT_VERSION} MATCHES "4")
    INCLUDE_DIRECTORIES(${QT_INCLUDES} ${OPENGL_INCLUDE_DIR} ${LIBUSB_1_INCLUDE_DIRS})
    MESSAGE(STATUS "QT_INCLUDES ${QT_INCLUDES}")
#     LINK_DIRECTORIES(${QT_LIBRARY_DIR} ${LIBUSB_1_LIBRARY_DIR})
#     MESSAGE(STATUS "QT_LIBRARY_DIR ${QT_LIBRARY_DIR}")
ELSE()
    INCLUDE_DIRECTORIES(${Qt5Widgets_INCLUDE_DIRS}, ${Qt5OpenGL_INCLUDE_DIRS} ${OPENGL_INCLUDE_DIR} ${LIBUSB_1_INCLUDE_DIRS})
    MESSAGE(STATUS "QT_INCLUDES  ${Qt5Widgets_INCLUDE_DIRS}, ${Qt5OpenGL_INCLUDE_DIRS} ${LIBUSB_1_INCLUDE_DIRS}")
    LINK_DIRECTORIES(${LIBUSB_1_LIBRARY_DIR})
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${Qt5Widgets_EXECUTABLE_COMPILE_FLAGS} ${Qt5OpenGL_EXECUTABLE_COMPILE_FLAGS}")
ENDIF()

SET ( OBJECTS_DIR temp )
SET ( MOC_DIR temp )
SET ( UI_HEADERS_DIR temp )
SET ( UI_SOURCES_DIR temp )


ADD_SUBDIRECTORY(sources)

INCLUDE_DIRECTORIES( ${CMAKE_SOURCE_DIR} $(CMAKE_CURRENT_SOURCE_DIR)/sources/includes ${LIBUSB_1_INCLUDE_DIRS})

IF(${USE_QT_VERSION} MATCHES "4")
    QT4_WRAP_CPP(APP_HEADERS_MOC ${MAIN_HEADERS} )
    QT4_WRAP_UI(APP_FORMS_HEADERS ${MAIN_FORMS} )
    QT4_ADD_RESOURCES(APP_RESOURCES_RCC ${APP_RESOURCES})
ELSE()
    QT5_WRAP_CPP(APP_HEADERS_MOC ${MAIN_HEADERS} )
    QT5_WRAP_UI(APP_FORMS_HEADERS ${MAIN_FORMS} )
    QT5_ADD_RESOURCES(APP_RESOURCES_RCC ${APP_RESOURCES})
ENDIF()


INCLUDE_DIRECTORIES( ${CMAKE_SOURCE_DIR} ${CMAKE_CURRENT_BINARY_DIR})

SOURCE_GROUP( "Generated Files" FILES
    ${MOC_FILES_CPP}
    ${APP_FORMS_HEADERS}
    ${APP_RESOURCES_RCC}
)

IF(${USE_QT_VERSION} MATCHES "4")
    INCLUDE(${QT_USE_FILE})
    ADD_DEFINITIONS(${QT_DEFINITIONS} -DQT_PROJECT -DQT_OPENGL -DNO_QT3SUPPORT -DDISABLE_QT3SUPPORT)
ELSE()
    ADD_DEFINITIONS( ${Qt5Widgets_DEFINITIONS} ${Qt5OpenGL_DEFINITIONS} ${OPENGL_DEFINITIONS} -DQT_PROJECT -DQT_OPENGL )
ENDIF()

ADD_EXECUTABLE(${CMAKE_PROJECT_NAME}
    ${APP_SOURCES} 
    ${MAIN_SOURCES}
    ${APP_HEADERS_MOC} 
    ${APP_FORMS_HEADERS} 
    ${APP_RESOURCES_RCC}
)


IF(${USE_QT_VERSION} MATCHES "4")
    TARGET_LINK_LIBRARIES(${CMAKE_PROJECT_NAME} ${QT_LIBRARIES} ${OPENGL_LIBRARIES} ${LIBUSB_LIBRARY})
ELSE()
    TARGET_LINK_LIBRARIES(${CMAKE_PROJECT_NAME} ${Qt5Widgets_LIBRARIES} ${Qt5OpenGL_LIBRARIES} ${OPENGL_LIBRARIES} ${LIBUSB_LIBRARY})
ENDIF()

ADD_CUSTOM_TARGET (tags
    COMMAND  ctags -R -f tags ${CMAKE_SOURCE_DIR}/sources
    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
)
# MESSAGE("CMAKE_SOURCE_DIR main ${CMAKE_SOURCE_DIR}")
# MESSAGE("CMAKE_CURRENT_BINARY_DIR main ${CMAKE_CURRENT_BINARY_DIR}")
# INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR})


# Setup module enabled/disabled defaults ...
# IF(MSVC)
#     SET(CNC_MK1_BUILD_GLX_MODULE_DEFAULT ON)
#     SET(CNC_MK1_BUILD_OSX_MODULE_DEFAULT OFF)
#     SET(CNC_MK1_BUILD_VIRTUAL_OFFSCREEN_MODULE_DEFAULT OFF)
# ENDIF(MSVC)
# 
# IF(UNIX AND NOT APPLE)
#     SET(CNC_MK1_BUILD_GLX_MODULE_DEFAULT ON)
#     SET(CNC_MK1_BUILD_OSX_MODULE_DEFAULT OFF)
#     SET(CNC_MK1_BUILD_VIRTUAL_OFFSCREEN_MODULE_DEFAULT OFF)
# ENDIF(UNIX AND NOT APPLE)
# 
# IF(APPLE)
#     SET(CNC_MK1_BUILD_GLX_MODULE_DEFAULT ON)
#     SET(CNC_MK1_BUILD_OSX_MODULE_DEFAULT ON)
#     SET(CNC_MK1_BUILD_VIRTUAL_OFFSCREEN_MODULE_DEFAULT OFF)
# ENDIF(APPLE)


OPTION(CNC_MK1_ENABLE_SYMBOL_VISIBILITY "Minimize the number of symbols exported from shared libraries." ${CNC_MK1_ENABLE_SYMBOL_VISIBILITY_DEFAULT})
MARK_AS_ADVANCED(CNC_MK1_ENABLE_SYMBOL_VISIBILITY)

# OPTION(CNC_MK1_ENABLE_TESTING "Build the CNC-Qt regression test suite." OFF)
# SET(BUILD_TESTING ${CNC_MK1_ENABLE_TESTING} CACHE INTERNAL "" FORCE)
# INCLUDE(CTest)
# MARK_AS_ADVANCED(DART_TESTING_TIMEOUT)
# IF(CNC_MK1_ENABLE_TESTING)
#     CMAKE_MINIMUM_REQUIRED(VERSION 2.6.1 FATAL_ERROR)
#     CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/CTestCustom.cmake.in ${CMAKE_CURRENT_BINARY_DIR}/CTestCustom.cmake @ONLY)
# ENDIF(CNC_MK1_ENABLE_TESTING)

# Find required external packages
#CNC_MK1_CHECK_REQUIRED_DEPENDENCY(CNC_MK1_HTTRACK_FOUND "libhttrack2" "http://www.httrack.com" "")
# CNC_MK1_CHECK_OPTIONAL_DEPENDENCY(CNC_MK1_BUILD_3DS_IO_MODULE CNC_MK1_3DS_FOUND "lib3ds")

# Capture system configuration
# INCLUDE(CNCMK1SystemConfiguration)

# MSVC configuration
IF(MSVC)
    IF(NOT MSVC)
        SET(CMAKE_EXE_LINKER_FLAGS "-Wl,--enable-runtime-pseudo-reloc" CACHE STRING "" FORCE)
        SET(CMAKE_SHARED_LINKER_FLAGS "-Wl,--enable-runtime-pseudo-reloc -Wl,--export-all-symbols" CACHE STRING "" FORCE)
    ENDIF(NOT MSVC)
ENDIF(MSVC)

# Setup output directories ...
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CNC_MK1_BINARY_DIR}/bin)

SET(CNC_MK1_LIBDIR lib) # Allows us to handle 64-bit libs if/when it becomes necessary.

IF(MSVC)
    SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CNC_MK1_BINARY_DIR}/bin)
ELSE(MSVC)
    SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CNC_MK1_BINARY_DIR}/${CNC_MK1_LIBDIR})
ENDIF(MSVC)

# Setup a macro for compiling resources ...
MACRO(CNC_MK1_COMPILE_RESOURCE OUTPUT INPUT RESOURCE_PATH)

    SET(INPUT_FILE "${CMAKE_CURRENT_SOURCE_DIR}/${INPUT}")
    SET(OUTPUT_FILE "${CMAKE_CURRENT_BINARY_DIR}/${INPUT}.cpp")
    GET_FILENAME_COMPONENT(OUTPUT_PATH ${OUTPUT_FILE} PATH)

    GET_TARGET_PROPERTY(CNC_MK1_RESOURCE_COMPILER cncqt-resource-compiler LOCATION)

    ADD_CUSTOM_COMMAND(
        DEPENDS cncqt-resource-compiler
        DEPENDS ${INPUT_FILE}
        COMMAND ${CMAKE_COMMAND} -E make_directory ${OUTPUT_PATH}
        COMMAND ${CNC_MK1_RESOURCE_COMPILER} --input ${INPUT_FILE} --path \"<path>${RESOURCE_PATH}</path>\" --output ${OUTPUT_FILE}
        OUTPUT ${OUTPUT_FILE}
        COMMENT "Compiling resource ${INPUT_FILE}"
        )

    LIST(APPEND ${OUTPUT} ${OUTPUT_FILE})

ENDMACRO(CNC_MK1_COMPILE_RESOURCE)

# Setup subdirectories ...
# CNC_MK1_CONDITIONAL_BUILD(MSVC gendef)

OPTION(CNC_MK1_ENABLE_DISTRIBUTION "Enable distribution targets." ON)
# CNC_MK1_CONDITIONAL_BUILD(CNC_MK1_ENABLE_DISTRIBUTION distribution)

# Hide some cruft ...
MARK_AS_ADVANCED(CMAKE_BACKWARDS_COMPATIBILITY)
MARK_AS_ADVANCED(CMAKE_EXECUTABLE_FORMAT)
MARK_AS_ADVANCED(CMAKE_LIBRARY_OUTPUT_DIRECTORY)
MARK_AS_ADVANCED(CMAKE_OSX_ARCHITECTURES)
MARK_AS_ADVANCED(CMAKE_OSX_DEPLOYMENT_TARGET)
MARK_AS_ADVANCED(CMAKE_OSX_SYSROOT)
MARK_AS_ADVANCED(CMAKE_RUNTIME_OUTPUT_DIRECTORY)
MARK_AS_ADVANCED(CMAKE_USE_CHRPATH)

